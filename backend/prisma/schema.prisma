generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String   @default("")
  email              String   @unique
  password           String?
  role               Role     @default(EMPLOYEE)
  designation        String   @default("")
  bankAccountNo      String   @default("")
  salary             Int      @default(0)
  isProfileCompleted Boolean? @default(false)
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isVerified         Boolean  @default(false)
  isFired            Boolean  @default(false)

  workEntries WorkEntry[]
  payments    Payment[]
  payrolls    Payroll[]
  accounts    Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model WorkEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  task      TaskType
  hours     Int
  date      DateTime
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Int
  transactionId String   @unique
  month         Int
  year          Int
  paidAt        DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payroll {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  month         Int
  year          Int
  salary        Int
  paidAt        DateTime?
  transactionId String?   @unique
  createdAt     DateTime  @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  message   String
  createdAt DateTime @default(now())
}

enum Role {
  EMPLOYEE
  HR
  ADMIN
}

enum TaskType {
  SALES
  SUPPORT
  CONTENT
  PAPERWORK
}
